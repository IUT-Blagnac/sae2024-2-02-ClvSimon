import iut.sae.algo
import unittest

class TestRLE(unittest.TestCase):

    def test_RLE(self):
        self.assertEqual("", Algo.RLE("") )
        self.assertEqual("1a1b1c", Algo.RLE("abc"))
        self.assertEqual("1a2b3c", Algo.RLE("abbccc"))
        self.assertEqual("3a1b2a", Algo.RLE("aaabaa"))
        self.assertEqual("1a1A1a", Algo.RLE("aAa"))
        self.assertEqual("9W4W", Algo.RLE("WWWWWWWWWWWWW"))

    def test_RLERecursif(self):
        try:
            self.assertEqual("", Algo.RLE("", 1))
            self.assertEqual("", Algo.RLE("", 3))
            
            self.assertEqual("1a1b1c", Algo.RLE("abc", 1))
            self.assertEqual("1a2b3c", Algo.RLE("abbccc", 1))
            self.assertEqual("3a1b2a", Algo.RLE("aaabaa", 1))
            self.assertEqual("1a1A1a", Algo.RLE("aAa", 1))

            self.assertEqual("111a111b111c", Algo.RLE("abc", 2))
            self.assertEqual("311a311b311c", Algo.RLE("abc", 3))

            saeItel1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211g1113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123113221231231121113213221231221132221222112112322211o"
            self.assertEqual(saeIte20, Algo.RLE("SAE Algo", 20))
        except Exception as e:
            self.fail("Exception inattendue: {}".format(str(e)))

    def test_unRLE(self):
        try:
            self.assertEqual("", Algo.unRLE(""))
            self.assertEqual("abc", Algo.unRLE("1a1b1c"))
            self.assertEqual("abbccc", Algo.unRLE("1a2b3c"))
            self.assertEqual("aaabaa", Algo.unRLE("3a1b2a"))
            self.assertEqual("aAa", Algo.unRLE("1a1A1a"))
            self.assertEqual("WWWWWWWWWWWWW", Algo.unRLE("9W4W"))
        except Exception as e:
            self.fail("Exception inattendue: {}".format(str(e)))

    def test_unRLERecursif(self):
        try:
            self.assertEqual("", Algo.unRLE("", 1))
            self.assertEqual("", Algo.unRLE("", 3))
            
            self.assertEqual("abc", Algo.unRLE("1a1b1c", 1))
            self.assertEqual("abbccc", Algo.unRLE("1a2b3c", 1))
            self.assertEqual("aaabaa", Algo.unRLE("3a1b2a", 1))
            self.assertEqual("aAa", Algo.unRLE("1a1A1a", 1))

            self.assertEqual("abc", Algo.unRLE("111a111b111c", 2))
            self.assertEqual("abc", Algo.unRLE("311a311b311c", 3))
        except Exception as e:
            self.fail("Exception inattendue: {}".format(str(e)))

if __name__ == '__main__':
    unittest.main()
